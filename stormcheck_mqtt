#!/bin/bash
#
# v0.1 - 26-Jan-04 - Initial Version for NSW only
# v0.5 -   -Oct-04 - Major cleanup
# v0.6 - 09-Nov-04 - Bug Fixes
# v0.7 - 11-Nov-04 - Corrected error with end time
# v0.8 - 10-Dec-04 - BOM changed format of VK2 warnings - Also added MP3 suport
# v0.9 - 13-Dec-04 - Error corrections
# v1.0 - 20-Jan-05 - Found a fix for the VK2 graphical warning problem
#
# v3.0 - 05-Jan-24 - Major rewrite and code review to use BOM AMOC XML, after years of, well...
#


#######################################################################
#
# Read in command-line args

if [ "$1" == "" ] ; then echo "You must define the state for this warning!" ; exit 0 ; fi
STATE=$1

if [ $(echo $@ | grep -c '\-debug') -eq 1 ]; then DEBUG=true; else DEBUG=false; fi
if [ $(echo $@ | grep -c '\-server') -eq 1 ]; then NO_TX=true; else NO_TX=false; fi

if [ "$DEBUG" = true ]; then
    echo "DEBUG: STATE="$STATE
fi


################################################################################################
# Define the warning files to download
if [ "$STATE" == "vk1" ] ; then WARNING_LIST="IDN21033 IDN21036" ; STATE=vk2 ; fi
if [ "$STATE" == "vk2" ] ; then WARNING_LIST="IDN21033 IDN21035 IDN21036" ; fi
if [ "$STATE" == "vk3" ] ; then WARNING_LIST="IDV21033 IDV21035" ; fi
if [ "$STATE" == "vk4" ] ; then WARNING_LIST="IDQ21033 IDQ21035" ; fi
if [ "$STATE" == "vk5" ] ; then WARNING_LIST="IDS21033 IDS21035" ; fi
if [ "$STATE" == "vk6" ] ; then WARNING_LIST="IDW21033 IDW21034 IDW21035" ; fi
if [ "$STATE" == "vk7" ] ; then WARNING_LIST="IDT21033 IDT21035" ; fi
if [ "$STATE" == "vk8" ] ; then WARNING_LIST="IDD21033 IDD21034 IDD21035" ; fi

CUSTOM=$(pwd)
LOCLIST=$CUSTOM/stormcheck_locations.$STATE

################################################################################################
#

MQTT_SERVER="172.22.1.240"

# Initialise some of the variables set within the script
WARNING_CURRENT=0
TMPDIR=/tmp
NOWARN=TRUE
STORMLOG=/tmp/stormlog
WARN_LOOP=0

# loop through the warning files for the defined state
for WARNING_FILE in $WARNING_LIST ; do
    unset DISPLIST
    unset LOC_PLAYLIST
    #  Download the warning pages
    WARNING_URL=ftp://ftp.bom.gov.au/anon/gen/fwo
    WARNING_FILE1=$WARNING_FILE.amoc.xml
    WARNING_FILE2=$WARNING_FILE.txt
    WARNING_FILE3=$WARNING_FILE.xml

    if [ "$DEBUG" = true ]; then echo; echo "DEBUG: Processing $WARNING_FILE1"; fi
    wget -qO $TMPDIR/$WARNING_FILE1 $WARNING_URL/$WARNING_FILE1
    wget -qO $TMPDIR/$WARNING_FILE2 $WARNING_URL/$WARNING_FILE2
    wget -qO $TMPDIR/$WARNING_FILE3 $WARNING_URL/$WARNING_FILE3
    if [ $(ls -1 $TMPDIR | grep -c ^$WARNING_FILE1$) -ne 1 ]; then
        if [ "$DEBUG" = true ]; then echo "DEBUG: $WARNING_FILE1 is not available - no warnings there"; fi
        continue
    fi
    if [ $(stat -c %b $TMPDIR/$WARNING_FILE1) -eq 0 ]; then
        if [ "$DEBUG" = true ]; then echo "DEBUG: $WARNING_FILE1 is not available - no warnings there"; fi
        continue
    fi

    ################################################################################
    # Extract the validity time from the AMOC XML
    START=$(cat $TMPDIR/$WARNING_FILE1 | grep validity-bgn-time-local | grep -oP '<v.*>\K.*?(?=</.*)')
    END=$(cat $TMPDIR/$WARNING_FILE1 | grep validity-end-time-local | grep -oP '<v.*>\K.*?(?=</.*)')
    HEADLINE=$(cat $TMPDIR/$WARNING_FILE1 | grep headline | grep -oP '<head.*>\K.*?(?=</.*)' | grep -iv cancel)

    if [ "$DEBUG" = true ]; then
        echo "DEBUG: START = $START"
        echo "DEBUG: END   = $END"
        echo "DEBUG: HEADLINE = $HEADLINE"
    fi

    # Does the current time fall within the validity window?
    # Convert timestamps from ISO-8601 format to Epoch to compare numerically with the current time
    StartEpoch=$(date -d $START +"%s")
    EndEpoch=$(date -d $END +"%s")
    if [ $(date +"%s") -gt $StartEpoch ] && [ $(date +"%s") -lt $EndEpoch ]; then
        if [ "$DEBUG" = true ]; then echo "DEBUG: Current time is inside warning validity period"; fi
    else
        # Current time is outside warning validity - skip and process the next item
        if [ "$DEBUG" = true ]; then echo "DEBUG: Current time is outside warning validity period"; fi
        continue
    fi

    # Extract the warning_phenomena_summary from the XML
    PHENOMENA=$(cat $TMPDIR/$WARNING_FILE3 | sed -n -e '/<text type="warning_phenomena_summary">/,/<\/text>/p' | grep -v text | sed -e 's/<[^>]*>//g')
    if [ "$DEBUG" = true ]; then echo "DEBUG: RAW Phenomena = $PHENOMENA"; fi

    #################################################################################
    # Build an array containing the areas affected by this warning
    cat $TMPDIR/$WARNING_FILE1 | grep 'area aac' > /tmp/areas
    WARNCOUNT=0
    while read -r AREA; do
        AREA_AAC=$(echo $AREA | cut -f2 -d\")
        AREA_PHASE=$(echo $AREA | cut -f4 -d\")
        AREA_DESC=$(echo $AREA | cut -f6 -d\")
        # Ignore bogus areas
        # if [ $(echo "$AREA_AAC" | grep -c "_SP001") -ne 0 ]; then
        if [ "$AREA_AAC" != "NSW_SP001" ] && [ "$AREA_AAC" != "QLD_SP001" ] && [ "$AREA_AAC" != "VIC_SP001" ]; then
            if [ "$AREA_PHASE" == "CAN" ]; then
                if [ "$DEBUG" = true ]; then echo "DEBUG: Warning cancelled for "$AREA_AAC" ("$AREA_DESC")"; fi
            else
                if [ "$DEBUG" = true ]; then echo "DEBUG: Warning current for "$AREA_AAC" ("$AREA_DESC")"; fi
                WARNCOUNT=$(expr $WARNCOUNT + 1)
                # Check if the active warning areas match our selectors
                if [ $(grep -c ^$AREA_AAC stormcheck_locations.$STATE) -ne 0 ]; then
                    NOWARN=FALSE
                    AREA_FILE=$(echo $AREA_DESC, | tr '/' ' ' | tr '-' ' ')
                    DISPLIST="$DISPLIST $AREA_DESC"
                    LOC_PLAYLIST="$LOC_PLAYLIST $AREA_FILE"
                fi
            fi
        fi
    done < /tmp/areas

    # Start building out variables to use when building audio playlist
    WARN_LOOP=$(expr $WARN_LOOP + 1)

    # If we haven't found a warning of interest to us, skip to the next input file.
    if [ $WARNCOUNT -eq 0 ]; then
        if [ "$DEBUG" = true ]; then echo "No warnings of interest"; fi
        echo $WARN_LOOP
        # Clear any existing MQTT values that may have been set
        mosquitto_pub -h $MQTT_SERVER -t weather/bom_ts_warn/warning_${WARN_LOOP}_issue -m ""
        mosquitto_pub -h $MQTT_SERVER -t weather/bom_ts_warn/warning_${WARN_LOOP}_expire -m ""
        mosquitto_pub -h $MQTT_SERVER -t weather/bom_ts_warn/warning_${WARN_LOOP}_areas -m ""
        mosquitto_pub -h $MQTT_SERVER -t weather/bom_ts_warn/warning_${WARN_LOOP}_phenom -m ""
        continue
    fi

    # Build the list of forcast conditions (phenomena)
    PHENOM_STRING=
    PHENOM_COUNT=0
    if [ $(echo $PHENOMENA | grep -ic 'damaging wind') -eq 1 ]; then PHENOM_STRING="$PHENOM_STRING damaging winds"; ((PHENOM_COUNT++)); fi
    if [ $(echo $PHENOMENA | grep -ic 'destructive wind') -eq 1 ]; then PHENOM_STRING="$PHENOM_STRING damaging, locally destructive winds"; ((PHENOM_COUNT++)); fi
    if [ $(echo $PHENOMENA | grep -ic 'large hail') -eq 1 ]; then PHENOM_STRING="$PHENOM_STRING large hailstones"; ((PHENOM_COUNT++)); fi
    if [ $(echo $PHENOMENA | grep -ic 'giant hail') -eq 1 ]; then PHENOM_STRING="$PHENOM_STRING large, possibly giant hailstones"; ((PHENOM_COUNT++)); fi
    if [ $(echo $PHENOMENA | grep -ic 'heavy rainfall') -eq 1 ]; then PHENOM_STRING="$PHENOM_STRING and heavy rainfall that may lead to flash flooding"; ((PHENOM_COUNT++)); fi
    if [ $(echo $PHENOMENA | grep -ic 'intense rain') -eq 1 ]; then PHENOM_STRING="$PHENOM_STRING and locally intense rainfall that may lead to life threatening flash flooding"; ((PHENOM_COUNT++)); fi

    #############################################################################
    # Build the forcast phenomena playlist
    PHENOMENA_STRING="Severe thunderstorms are likely to produce"
    for condition in $PHENOM_STRING; do
        PHENOMENA_STRING="$PHENOMENA_STRING $condition"
    done
    PHENOMENA_STRING="$PHENOMENA_STRING over the next few hours."


    #############################################################################
    # Send the MQTT messages for this loop
    mosquitto_pub -h $MQTT_SERVER -t weather/bom_ts_warn/warning_${WARN_LOOP}_issue -m "$START"
    mosquitto_pub -h $MQTT_SERVER -t weather/bom_ts_warn/warning_${WARN_LOOP}_expire -m "$END"
    mosquitto_pub -h $MQTT_SERVER -t weather/bom_ts_warn/warning_${WARN_LOOP}_areas -m "$LOC_PLAYLIST"
    mosquitto_pub -h $MQTT_SERVER -t weather/bom_ts_warn/warning_${WARN_LOOP}_phenom -m "$PHENOMENA_STRING"
done

# Decide if we need to continue
if [ "$NOWARN" == "TRUE" ]; then
    if [ "$DEBUG" = true ]; then echo "DEBUG: No warnings of interest"; fi
    WARNING_CURRENT=0
else
    WARNING_CURRENT=1
fi

# Set the master "warning current" flag
mosquitto_pub -h $MQTT_SERVER -t weather/bom_ts_warn/warning_current -m $WARNING_CURRENT

# Post-run cleanup
if [ "$DEBUG" = false ]; then
    $OUTFILE $TMPDIR/ID*.xml $TMPDIR/ID*.txt
fi
exit 0
